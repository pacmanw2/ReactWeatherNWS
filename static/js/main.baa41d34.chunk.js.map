{"version":3,"sources":["Card.js","CardHourlyChild.js","weatherUtils.js","CardHourlyForecast.js","Tab.js","CardDailyChild.js","CardDailyForecast.js","response.js","App.js","WeatherAlert.js","serviceWorker.js","index.js"],"names":["Card","state","noaaEndpoint","this","getLocationName","fetch","then","response","json","jsonObj","city","setState","console","log","getForecast","properties","forecast","hourlyForecastEndpoint","forecastHourly","url","updated","Date","toString","forecastPeriods","periods","temp","temperature","detailedForecast","lastUpdated","className","React","Component","CardHourlyChild","props","fontSize","style","shortForecast","time","get12hrTime","timeHour","getHours","CardHourlyForecast","coord","hourlyEndpoint","getHourlyForecast","hourlyForecast","forecast12hr","slice","forecastHourlyAll","hourlyChildren","map","element","startTime","key","number","CardDailyChild","styles","forecastStyle","isDayTime","backgroundColor","color","date","CardDailyForecast","getCoordinateData","forecastCards","dateObj","day","getDate","monthName","toLocaleString","month","isDaytime","responseObject","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.baa41d34.chunk.js","sourcesContent":["import React from 'react';\n\nclass Card extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            'city': null,\n            'state': null,\n            'lastUpdated': null,\n            'forecast': null,\n            'forecastHourly': null,\n            'temp': null,\n            'detailedForecast': null,\n            'forecast24hr': null\n        }\n        this.noaaEndpoint = 'https://api.weather.gov/points/'\n    }\n\n    componentDidMount() {\n        this.getLocationName()\n    }\n\n\n\n    /**\n     * Get the City/State of the location.\n     * Current location is hard coded to Vernon, California.\n     */\n    getLocationName() {\n        // let coord = '34.052235,-118.243683'\n        let coord = '47.658779,-117.426048'\n        this.noaaEndpoint += coord\n\n        fetch(this.noaaEndpoint).then(\n            (response) => {\n                return response.json()\n            }\n        ).then(\n            (jsonObj) => {\n                let city = jsonObj['properties']['relativeLocation']['properties']['city']\n                let state = jsonObj['properties']['relativeLocation']['properties']['state']\n                this.setState(\n                    {\n                        city: city,\n                        state: state\n                    }\n                )\n                console.log(jsonObj)\n                this.getForecast(jsonObj.properties.forecast)\n                let hourlyForecastEndpoint = jsonObj.properties.forecastHourly\n                console.log(hourlyForecastEndpoint)\n                //this.getHourlyForecast(hourlyForecastEndpoint)\n            }\n        )\n    }\n\n    /**\n     * Get the forecast from NWS\n     * @param {String} url \n     */\n    getForecast(url) {\n        fetch(url).then(\n            (response) => {\n                return response.json()\n            }\n        ).then(\n            (jsonObj) => {\n                let updated = new Date(jsonObj.properties.updated).toString()\n                let forecastPeriods = jsonObj.properties.periods\n                let temp = jsonObj.properties.periods[0].temperature\n                let detailedForecast = jsonObj.properties.periods[0].detailedForecast\n\n                this.setState({\n                    lastUpdated: updated,\n                    forecast: forecastPeriods,\n                    temp: temp,\n                    detailedForecast: detailedForecast\n                })\n                // console.log(forecastPeriods)\n\n            }\n        )\n    }\n\n    render() {\n        //console.log(this.state.forecast)\n        // const styles = { backgroundColor: '#fff1a6' }\n        return (\n            <div className=\"banner\">\n                <div className=\"item\">\n                    <div className=\"item-temp\">\n                        <h2 className=\"main-location\">{this.state.city}, {this.state.state}</h2>\n                        <p className=\"main-temp\">{this.state.temp}&#8457;</p>\n\n                        <h2 className=\"main-detailed\">{this.state.detailedForecast}</h2>\n                        <p className=\"main-updated\">Last Update: {this.state.lastUpdated}</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\nexport default Card;","import React from 'react';\n\nfunction CardHourlyChild(props) {\n    const fontSize = { fontSize: 14 }\n    return (\n        <div>\n            <h1>{props.temp}</h1>\n            <h1 style={fontSize}>{props.shortForecast}</h1>\n            <h1 style={fontSize}>{props.time}</h1>\n        </div>\n    )\n}\n\nexport default CardHourlyChild","/**\n * With the given datetime string, convert to Date object \n * to get the hours (24hr format). From the 24 hour format, convert\n * to 12 hour format.\n * @param {String} time \n */\nexport function get12hrTime(time) {\n    let timeHour = new Date(time).getHours();\n    if (12 <= timeHour) {\n        timeHour = timeHour % 12;\n        if (0 === timeHour) {\n            console.log('time is 0')\n            timeHour = 12;\n        }\n        timeHour = timeHour.toString() + ' PM';\n    }\n    else {\n        if (0 === timeHour) {\n            timeHour = 12\n        }\n        timeHour = timeHour.toString() + ' AM';\n    }\n    return timeHour;\n}\n\n","import React from 'react';\nimport Chart from \"chart.js\"\nimport CardHourlyChild from './CardHourlyChild.js';\nimport { get12hrTime } from './weatherUtils.js'\n\nclass CardHourlyForecast extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            'forecastHourlyAll': null,\n            'forecast12hr': null,\n            'hourlyForecast': null\n        }\n        this.noaaEndpoint = 'https://api.weather.gov/points/'\n        // this.coord = '34.052235,-118.243683'\n        this.coord = '47.658779,-117.426048'\n    }\n\n    componentDidMount() {\n        this.getForecast()\n    }\n\n    /**\n     * Get the forecast for the current coordinates\n     */\n    getForecast() {\n        let url = this.noaaEndpoint + this.coord\n        console.log(url)\n        fetch(url).then(\n            (response) => { return response.json() }\n        ).then(\n            (jsonObj) => {\n                // get the endpoint to the hourly forecast\n                let hourlyEndpoint = jsonObj.properties.forecastHourly\n                this.getHourlyForecast(hourlyEndpoint)\n            }\n        )\n    }\n\n    getHourlyForecast(url) {\n        fetch(url).then(\n            (response) => { return response.json() }\n        ).then(\n            (jsonObj) => {\n                let hourlyForecast = jsonObj.properties.periods\n                let forecast12hr = hourlyForecast.slice(0, 12)\n                this.setState({ forecast12hr: forecast12hr, forecastHourlyAll: hourlyForecast })\n                console.log('12 hour forecast')\n                console.log(this.state.forecast12hr)\n                //let time = this.get12hrTime();\n                const hourlyChildren = this.state.forecast12hr.map(\n                    element => {\n                        let time = get12hrTime(element.startTime)\n                        console.log(\"the time is \" + time)\n                        return <CardHourlyChild\n                            key={element.number}\n                            time={time}\n                            temp={element.temperature}\n                            shortForecast={element.shortForecast}\n                        />\n                    }\n                )\n\n                console.log(hourlyChildren)\n                this.setState({ hourlyForecast: hourlyChildren })\n            }\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"flex-container\">\n                {this.state.hourlyForecast}\n            </div>\n        )\n    }\n}\nexport default CardHourlyForecast\n","import React from 'react';\n\nclass Tab extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            tabIds: ['tabToday', 'tabTomorrow', 'tabWeek']\n        }\n    }\n\n    activeTab(tabId) {\n\n        // deactivate all tabs\n        for (var tab of this.state.tabIds) {\n            document.getElementById(tab).classList.remove(\"is-active\")\n        }\n\n        // set the active tab\n        document.getElementById(tabId).classList.add(\"is-active\")\n    }\n\n    render() {\n        return (\n            <div className=\"tabs is-centered\">\n                <ul>\n                    <li id=\"tabToday\" className=\"is-active\">\n                        <a href=\"#tabTodayAnchor\" onClick={() => this.activeTab('tabToday')}>Today</a>\n                    </li>\n                    <li id=\"tabTomorrow\">\n                        <a href=\"#tabTomorrowAnchor\" onClick={() => this.activeTab('tabTomorrow')}>Tomorrow</a>\n                    </li>\n                    <li id=\"tabWeek\">\n                        <a href=\"#tabWeekAnchor\" onClick={() => this.activeTab('tabWeek')}>Week</a>\n                    </li>\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Tab;","import React from 'react';\n\nfunction CardDailyChild(props) {\n    let styles = null\n    let forecastStyle = null\n    let isDay = props.isDayTime\n\n    if (isDay) {\n        styles = { backgroundColor: '#00FF9F' }\n        forecastStyle = { color: '#888' }\n\n    } else {\n        styles = { backgroundColor: '#546bab', color: 'white' }\n        forecastStyle = { color: '#ffff00' }\n    }\n\n    return (\n        // <div className=\"weather-forecast\">\n        <div className=\"forecast-item\" style={styles}>\n            <div className=\"day\">\n                <h4>{props.time}</h4>\n                <h6 style={forecastStyle}>{props.date}</h6>\n            </div>\n            <div className=\"forecast\">\n                <i className=\"wi wi-night-sleet\"></i> {props.temp}&#8457;\n                    <h6 style={forecastStyle}>{props.shortForecast}</h6>\n            </div>\n            {/* </div> */}\n        </div>\n    )\n}\n\nexport default CardDailyChild","import React from 'react';\nimport CardDailyChild from './CardDailyChild.js'\nimport { get12hrTime } from './weatherUtils.js'\n\n/*\nTODO: break down the forecast-item into components,\nso that each day is a component itself.\n\nThis component was copied over from CardHourlyForecast.js\n*/\n\nclass CardDailyForecast extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            'forecast': null\n        }\n        this.noaaEndpoint = 'https://api.weather.gov/points/'\n        this.coord = '47.658779,-117.426048'\n    }\n\n    componentDidMount() {\n        this.getCoordinateData()\n    }\n\n    /**\n     * Get the forecast for the current coordinates\n     */\n    getCoordinateData() {\n        let url = this.noaaEndpoint + this.coord\n        console.log(url)\n        fetch(url).then(\n            (response) => { return response.json() }\n        ).then(\n            (jsonObj) => {\n                // get the endpoint to the forecast\n                let forecast = jsonObj.properties.forecast\n                console.log('forecast')\n                console.log(forecast)\n                this.getForecast(forecast)\n            }\n        )\n    }\n\n    getForecast(url) {\n        fetch(url).then(\n            (response) => { return response.json() }\n        ).then(\n            (jsonObj) => {\n                let forecastPeriods = jsonObj.properties.periods\n                console.log(forecastPeriods)\n                const forecastCards = forecastPeriods.map(\n                    element => {\n                        let time = get12hrTime(element.startTime)\n                        let dateObj = new Date(element.startTime)\n                        let day = dateObj.getDate()\n                        let monthName = dateObj.toLocaleString('default', { month: 'short' })\n\n                        return <CardDailyChild\n                            key={element.number}\n                            time={time}\n                            date={monthName + ' ' + day}\n                            temp={element.temperature}\n                            shortForecast={element.shortForecast}\n                            isDayTime={element.isDaytime}\n                        />\n                    }\n                )\n\n                console.log(forecastCards)\n                this.setState({ forecast: forecastCards })\n            }\n        )\n    }\n\n    // /**\n    //  * With the given datetime string, convert to Date object \n    //  * to get the hours (24hr format). From the 24 hour format, convert\n    //  * to 12 hour format.\n    //  * @param {String} time \n    //  */\n    // get12hrTime(time) {\n    //     let timeHour = new Date(time).getHours();\n    //     console.log(timeHour)\n    //     if (12 <= timeHour) {\n    //         timeHour = timeHour % 12;\n    //         if (0 === timeHour) {\n    //             console.log('time is 0')\n    //             timeHour = 12;\n    //         }\n    //         timeHour = timeHour.toString() + ' PM';\n    //         console.log(timeHour)\n    //     }\n    //     else {\n    //         if (0 === timeHour) {\n    //             timeHour = 12\n    //         }\n    //         timeHour = timeHour.toString() + ' AM';\n    //     }\n    //     console.log(timeHour)\n    //     return timeHour;\n    // }\n\n    render() {\n        return (\n            <div className=\"weather-forecast\">\n                {this.state.forecast}\n            </div>\n        )\n    }\n}\nexport default CardDailyForecast\n","const responseObject = {\n    \"@context\": [\n        \"https://raw.githubusercontent.com/geojson/geojson-ld/master/contexts/geojson-base.jsonld\",\n        {\n            \"wx\": \"https://api.weather.gov/ontology#\",\n            \"@vocab\": \"https://api.weather.gov/ontology#\"\n        }\n    ],\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"id\": \"https://api.weather.gov/alerts/NWS-IDP-PROD-4025905-3417122\",\n            \"type\": \"Feature\",\n            \"geometry\": null,\n            \"properties\": {\n                \"@id\": \"https://api.weather.gov/alerts/NWS-IDP-PROD-4025905-3417122\",\n                \"@type\": \"wx:Alert\",\n                \"id\": \"NWS-IDP-PROD-4025905-3417122\",\n                \"areaDesc\": \"Escambia Coastal; Baldwin Coastal; Santa Rosa Coastal; Mobile Coastal; Okaloosa Coastal\",\n                \"geocode\": {\n                    \"UGC\": [\n                        \"FLZ202\",\n                        \"ALZ266\",\n                        \"FLZ204\",\n                        \"ALZ265\",\n                        \"FLZ206\"\n                    ],\n                    \"SAME\": [\n                        \"012033\",\n                        \"001003\",\n                        \"012113\",\n                        \"001097\",\n                        \"012091\"\n                    ]\n                },\n                \"affectedZones\": [\n                    \"https://api.weather.gov/zones/forecast/FLZ202\",\n                    \"https://api.weather.gov/zones/forecast/ALZ266\",\n                    \"https://api.weather.gov/zones/forecast/FLZ204\",\n                    \"https://api.weather.gov/zones/forecast/ALZ265\",\n                    \"https://api.weather.gov/zones/forecast/FLZ206\"\n                ],\n                \"references\": [\n                    {\n                        \"@id\": \"https://api.weather.gov/alerts/NWS-IDP-PROD-4023990-3415662\",\n                        \"identifier\": \"NWS-IDP-PROD-4023990-3415662\",\n                        \"sender\": \"w-nws.webmaster@noaa.gov\",\n                        \"sent\": \"2020-01-22T06:14:00-06:00\"\n                    },\n                    {\n                        \"@id\": \"https://api.weather.gov/alerts/NWS-IDP-PROD-4025432-3416756\",\n                        \"identifier\": \"NWS-IDP-PROD-4025432-3416756\",\n                        \"sender\": \"w-nws.webmaster@noaa.gov\",\n                        \"sent\": \"2020-01-23T13:51:00-06:00\"\n                    },\n                    {\n                        \"@id\": \"https://api.weather.gov/alerts/NWS-IDP-PROD-4025097-3416508\",\n                        \"identifier\": \"NWS-IDP-PROD-4025097-3416508\",\n                        \"sender\": \"w-nws.webmaster@noaa.gov\",\n                        \"sent\": \"2020-01-23T06:54:00-06:00\"\n                    },\n                    {\n                        \"@id\": \"https://api.weather.gov/alerts/NWS-IDP-PROD-4024390-3415992\",\n                        \"identifier\": \"NWS-IDP-PROD-4024390-3415992\",\n                        \"sender\": \"w-nws.webmaster@noaa.gov\",\n                        \"sent\": \"2020-01-22T14:20:00-06:00\"\n                    },\n                    {\n                        \"@id\": \"https://api.weather.gov/alerts/NWS-IDP-PROD-4024807-3416297\",\n                        \"identifier\": \"NWS-IDP-PROD-4024807-3416297\",\n                        \"sender\": \"w-nws.webmaster@noaa.gov\",\n                        \"sent\": \"2020-01-22T22:37:00-06:00\"\n                    }\n                ],\n                \"sent\": \"2020-01-23T23:28:00-06:00\",\n                \"effective\": \"2020-01-23T23:28:00-06:00\",\n                \"onset\": \"2020-01-23T23:28:00-06:00\",\n                \"expires\": \"2020-01-24T07:30:00-06:00\",\n                \"ends\": \"2020-01-24T18:00:00-06:00\",\n                \"status\": \"Actual\",\n                \"messageType\": \"Update\",\n                \"category\": \"Met\",\n                \"severity\": \"Moderate\",\n                \"certainty\": \"Likely\",\n                \"urgency\": \"Expected\",\n                \"event\": \"Rip Current Statement\",\n                \"sender\": \"w-nws.webmaster@noaa.gov\",\n                \"senderName\": \"NWS Mobile AL\",\n                \"headline\": \"Rip Current Statement issued January 23 at 11:28PM CST until January 24 at 6:00PM CST by NWS Mobile AL\",\n                \"description\": \"* WHAT...Dangerous rip currents expected.\\n\\n* WHERE...In Alabama, Mobile Coastal and Baldwin Coastal\\nCounties. In Florida, Escambia Coastal, Santa Rosa Coastal and\\nOkaloosa Coastal Counties.\\n\\n* WHEN...From Thursday morning through Friday afternoon.\\n\\n* IMPACTS...Rip currents can sweep even the best swimmers away\\nfrom shore into deeper water.\",\n                \"instruction\": \"Swim near a lifeguard. If caught in a rip current, relax and\\nfloat. Don't swim against the current. If able, swim in a\\ndirection following the shoreline. If unable to escape, face the\\nshore and call or wave for help.\",\n                \"response\": \"Avoid\",\n                \"parameters\": {\n                    \"NWSheadline\": [\n                        \"HIGH RIP CURRENT RISK REMAINS IN EFFECT THROUGH FRIDAY AFTERNOON\"\n                    ],\n                    \"VTEC\": [\n                        \"/O.CON.KMOB.RP.S.0005.000000T0000Z-200125T0000Z/\"\n                    ],\n                    \"PIL\": [\n                        \"MOBCFWMOB\"\n                    ],\n                    \"BLOCKCHANNEL\": [\n                        \"CMAS\",\n                        \"EAS\",\n                        \"NWEM\"\n                    ],\n                    \"eventEndingTime\": [\n                        \"2020-01-24T18:00:00-06:00\"\n                    ]\n                }\n            }\n        },\n        {\n            \"id\": \"https://api.weather.gov/alerts/NWS-IDP-PROD-4025850-3417070\",\n            \"type\": \"Feature\",\n            \"geometry\": null,\n            \"properties\": {\n                \"@id\": \"https://api.weather.gov/alerts/NWS-IDP-PROD-4025850-3417070\",\n                \"@type\": \"wx:Alert\",\n                \"id\": \"NWS-IDP-PROD-4025850-3417070\",\n                \"areaDesc\": \"Baldwin Inland; Escambia Coastal; Conecuh; Mobile Inland; Washington; Mobile Central; Greene; Escambia Inland; Monroe; George; Stone; Wayne; Baldwin Coastal; Escambia; Perry; Mobile Coastal; Baldwin Central; Clarke; Santa Rosa Inland\",\n                \"geocode\": {\n                    \"UGC\": [\n                        \"ALZ262\",\n                        \"FLZ202\",\n                        \"ALZ056\",\n                        \"ALZ261\",\n                        \"ALZ052\",\n                        \"ALZ263\",\n                        \"MSZ076\",\n                        \"FLZ201\",\n                        \"ALZ055\",\n                        \"MSZ079\",\n                        \"MSZ078\",\n                        \"MSZ067\",\n                        \"ALZ266\",\n                        \"ALZ059\",\n                        \"MSZ075\",\n                        \"ALZ265\",\n                        \"ALZ264\",\n                        \"ALZ053\",\n                        \"FLZ203\"\n                    ],\n                    \"SAME\": [\n                        \"001003\",\n                        \"012033\",\n                        \"001035\",\n                        \"001097\",\n                        \"001129\",\n                        \"028041\",\n                        \"001099\",\n                        \"028039\",\n                        \"028131\",\n                        \"028153\",\n                        \"001053\",\n                        \"028111\",\n                        \"001025\",\n                        \"012113\"\n                    ]\n                },\n                \"affectedZones\": [\n                    \"https://api.weather.gov/zones/forecast/ALZ262\",\n                    \"https://api.weather.gov/zones/forecast/FLZ202\",\n                    \"https://api.weather.gov/zones/forecast/ALZ056\",\n                    \"https://api.weather.gov/zones/forecast/ALZ261\",\n                    \"https://api.weather.gov/zones/forecast/ALZ052\",\n                    \"https://api.weather.gov/zones/forecast/ALZ263\",\n                    \"https://api.weather.gov/zones/forecast/MSZ076\",\n                    \"https://api.weather.gov/zones/forecast/FLZ201\",\n                    \"https://api.weather.gov/zones/forecast/ALZ055\",\n                    \"https://api.weather.gov/zones/forecast/MSZ079\",\n                    \"https://api.weather.gov/zones/forecast/MSZ078\",\n                    \"https://api.weather.gov/zones/forecast/MSZ067\",\n                    \"https://api.weather.gov/zones/forecast/ALZ266\",\n                    \"https://api.weather.gov/zones/forecast/ALZ059\",\n                    \"https://api.weather.gov/zones/forecast/MSZ075\",\n                    \"https://api.weather.gov/zones/forecast/ALZ265\",\n                    \"https://api.weather.gov/zones/forecast/ALZ264\",\n                    \"https://api.weather.gov/zones/forecast/ALZ053\",\n                    \"https://api.weather.gov/zones/forecast/FLZ203\"\n                ],\n                \"references\": [],\n                \"sent\": \"2020-01-23T22:07:00-06:00\",\n                \"effective\": \"2020-01-23T22:07:00-06:00\",\n                \"onset\": \"2020-01-23T22:07:00-06:00\",\n                \"expires\": \"2020-01-24T06:00:00-06:00\",\n                \"ends\": \"2020-01-24T06:00:00-06:00\",\n                \"status\": \"Actual\",\n                \"messageType\": \"Alert\",\n                \"category\": \"Met\",\n                \"severity\": \"Moderate\",\n                \"certainty\": \"Likely\",\n                \"urgency\": \"Expected\",\n                \"event\": \"Dense Fog Advisory\",\n                \"sender\": \"w-nws.webmaster@noaa.gov\",\n                \"senderName\": \"NWS Mobile AL\",\n                \"headline\": \"Dense Fog Advisory issued January 23 at 10:07PM CST until January 24 at 6:00AM CST by NWS Mobile AL\",\n                \"description\": \"* WHAT...Visibility a quarter mile or less in dense fog.\\n\\n* WHERE...Portions of south central and southwest Alabama,\\nnorthwest Florida and southeast Mississippi.\\n\\n* WHEN...Until 6 AM CST Friday.\\n\\n* IMPACTS...Hazardous driving conditions due to low visibility.\",\n                \"instruction\": \"If driving, slow down, use your headlights, and leave plenty of\\ndistance ahead of you.\",\n                \"response\": \"Execute\",\n                \"parameters\": {\n                    \"NWSheadline\": [\n                        \"DENSE FOG ADVISORY IN EFFECT UNTIL 6 AM CST FRIDAY\"\n                    ],\n                    \"VTEC\": [\n                        \"/O.NEW.KMOB.FG.Y.0007.200124T0407Z-200124T1200Z/\"\n                    ],\n                    \"PIL\": [\n                        \"MOBNPWMOB\"\n                    ],\n                    \"BLOCKCHANNEL\": [\n                        \"CMAS\",\n                        \"EAS\",\n                        \"NWEM\"\n                    ],\n                    \"eventEndingTime\": [\n                        \"2020-01-24T06:00:00-06:00\"\n                    ]\n                }\n            }\n        }\n    ],\n    \"title\": \"current watches, warnings, and advisories for 31 N, 88 W\",\n    \"updated\": \"2020-01-24T08:44:06+00:00\"\n}\n\nexport default responseObject;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Card from './Card.js';\nimport CardHourlyForecast from './CardHourlyForecast.js'\nimport Tab from './Tab.js'\nimport './CardHourlyForecast.css';\nimport './CardDailyForecast.js';\nimport CardDailyForecast from './CardDailyForecast';\nimport WeatherAlert from './WeatherAlert'\n\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      'city': null,\n      'state': null\n    }\n  }\n\n\n\n  render() {\n    // const x = { backgroundColor: 'green' }\n\n    return (\n      <div className=\"App\" >\n        {/* <div className=\"banner\">\n          <Card />\n        </div> */}\n        {/* <WeatherAlert /> */}\n        <Card />\n        <CardHourlyForecast />\n        <CardDailyForecast />\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactModal from 'react-modal';\nimport responseObject from './response'\n\nclass WeatherAlert extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            showModal: false,\n            nwsHeadline: 'N/A',\n            event: 'N/A',\n            description: 'N/A',\n            headline: 'N/A',\n            instruction: 'N/A',\n            severity: 'N/A',\n            descriptionTab: 'descriptionTab',\n            instructionTab: 'instructionTab',\n            isAlertAvailable: false\n        }\n\n        this.handleOpenModal = this.handleOpenModal.bind(this)\n        this.handleCloseModal = this.handleCloseModal.bind(this)\n\n        this.infoStyles = { 'backgroundColor': '#f09000', 'color': 'black' }\n        this.styles = { 'display': 'none', 'width': '40%' }\n    }\n\n    componentDidMount() {\n        ReactModal.setAppElement('#alertContainer');\n        // this.getAlert();\n        this.getAlertMock();\n    }\n\n    handleOpenModal() {\n        this.setState({ showModal: true });\n    }\n\n    handleCloseModal() {\n        this.setState({ showModal: false });\n    }\n\n    getAlert() {\n        var coor = \"31,-88\"\n        var url = \"https://api.weather.gov/alerts/active?point=\" + coor\n\n        fetch(url).then(\n            (response) => { return response.json() }\n        ).then(\n            (jsonObj) => {\n                console.log(jsonObj)\n                let properties = jsonObj.features[0].properties\n                let nwsHeadline = properties.parameters.NWSheadline\n                let event = properties.event\n                let headline = properties.headline\n                let description = properties.description\n                let instruction = properties.instruction\n\n                if (description) {\n\n                }\n\n                this.setState({\n                    nwsHeadline: nwsHeadline[0],\n                    event: event,\n                    description: description,\n                    headline: headline,\n                    instruction: instruction\n                })\n\n            }\n        )\n    }\n\n    getAlertMock() {\n        let properties = responseObject.features[0].properties\n        let nwsHeadline = properties.parameters.NWSheadline\n        let event = properties.event\n        let headline = properties.headline\n        let description = properties.description\n        let instruction = properties.instruction\n        let severity = properties.severity\n\n        this.setState({\n            nwsHeadline: nwsHeadline[0],\n            event: event,\n            description: description,\n            headline: headline,\n            instruction: instruction,\n            severity: severity\n        })\n    }\n\n    openTab(tabId) {\n        console.log(this.state.isAlertAvailable)\n        if (this.state.isAlertAvailable) {\n            if (this.state.descriptionTab === tabId) {\n                console.log('opening: ' + tabId)\n                let tabClicked = document.getElementById(this.state.descriptionTab);\n                tabClicked.style.display = \"block\"\n\n                // TODO: Something like this, but to the tabs\n                // tabClicked.style.backgroundColor = \"orange\"\n\n                let tabToHide = document.getElementById(this.state.instructionTab);\n                tabToHide.style.display = \"none\"\n            } else if (this.state.instructionTab === tabId) {\n                console.log('opening: ' + tabId)\n                let tabClicked = document.getElementById(this.state.instructionTab);\n                tabClicked.style.display = \"block\"\n\n                let tabToHide = document.getElementById(this.state.descriptionTab);\n                tabToHide.style.display = \"none\"\n\n            }\n        } else {\n            console.log(\"There is no alert available\")\n\n        }\n\n    }\n\n\n    render() {\n        return (\n            <div className=\"weather-alert-container\" id='alertContainer'>\n                <div className=\"weather-alert\">\n                    <button className=\"button is-danger is-hovered\" onClick={this.handleOpenModal}>\n                        <i className=\"fas fa-exclamation-triangle\"></i>\n                    </button>\n                    <ReactModal\n                        isOpen={this.state.showModal}\n                        contentLabel=\"Minimal Modal Example\"\n                        style={{ \"content\": { \"bottom\": 'auto' } }}\n                    >\n                        <div className=\"w3-bar w3-border w3-black w3-center\">\n                            <button className=\"w3-bar-item w3-button\" style={{ \"width\": \"50%\" }} onClick={() => this.openTab(this.state.descriptionTab)}>Description</button>\n                            <button className=\"w3-bar-item w3-button\" style={{ \"width\": \"50%\" }} onClick={() => this.openTab(this.state.instructionTab)}>Instruction</button>\n                        </div>\n\n                        <div id={this.state.descriptionTab}>\n                            <h2 style={{ \"textAlign\": \"center\" }}>{this.state.event}</h2>\n                            <p style={{ \"textAlign\": \"center\" }}>\n                                {this.state.description}\n                            </p>\n                        </div>\n\n                        <div id={this.state.instructionTab} style={{ \"display\": \"none\" }}>\n                            <h2 style={{ \"textAlign\": \"center\" }}>Severity: {this.state.severity}</h2>\n                            <p style={{ \"textAlign\": \"center\" }}>{this.state.instruction}</p>\n                        </div>\n\n                        <div style={{ \"display\": \"flex\", \"justifyContent\": \"center\" }}>\n                            <button\n                                className=\"button is-primary is-rounded\"\n                                onClick={this.handleCloseModal}>\n                                Close\n                            </button>\n                        </div>\n\n                    </ReactModal>\n                </div>\n            </div >\n        );\n    }\n}\n\nexport default WeatherAlert;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}